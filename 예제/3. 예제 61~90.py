from typing import Deque


print("-------------------------------------061")
# 061
'''price 변수에는 날짜와 종가 정보가 저장돼 있다.
   날짜 정보를 제외하고 가격 정보만을 출력하라. (힌트 : 슬라이싱)'''
   
price = ['20180728', 100, 130, 140, 150, 160, 170]
print(price[1:])


print("-------------------------------------062")
# 062
'''슬라이싱을 사용해서 홀수만 출력하라.'''
nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(nums[::2])


print("-------------------------------------063")
# 063
'''슬라이싱을 사용해서 짝수만 출력하라.'''
nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(nums[1::2])


print("-------------------------------------064")
# 064
'''슬라이싱을 사용해서 리스트의 숫자를 역 방향으로 출력하라.'''
nums = [1, 2, 3, 4, 5]
print(nums[::-1])


print("-------------------------------------065")
# 065
'''interest 리스트에는 아래의 데이터가 바인딩되어 있다.'''
interest = ['삼성전자', 'LG전자', 'Naver']
'''interest 리스트를 사용하여 아래와 같이 화면에 출력하라.
   출력 예시:
   삼성전자 Naver
   '''
print(interest[0],end=' ')
print(interest[2]) # 내 답

# 정답
print(interest[0], interest[2])


print("-------------------------------------066 join 메서드")
# 066 join 메서드 합치다
interest = ['삼성전자', 'LG전자', 'Naver', 'SK하이닉스', '미래에셋대우']
'''interest 리스트를 사용하여 아래와 같이 화면에 출력하라.
   출력 예시:
   삼성전자 LG전자 Naver SK하이닉스 미래에셋대우'''
print(interest[0], interest[1], interest[2], interest[3], interest[4]) # 내 답
# 정답
print(" ".join(interest))


print("-------------------------------------067 join 메서드")
# 067 join 메서드 합치다
'''interest 리스트에는 아래의 데이터가 바인딩되어 있다.'''
interest = ['삼성전자', 'LG전자', 'Naver', 'SK하이닉스', '미래에셋대우']
'''interest 리스트를 사용하여 아래와 같이 화면에 출력하라.
출력 예시:
삼성전자/LG전자/Naver/SK하이닉스/미래에셋대우
'''
print("/".join(interest))


print("-------------------------------------068 join 메서드")
# 068 join 메서드
'''interest 리스트에는 아래의 데이터가 바인딩되어 있다.'''
interest = ['삼성전자', 'LG전자', 'Naver', 'SK하이닉스', '미래에셋대우']
'''join() 메서드를 사용해서 interest 리스트를 아래와 같이 화면에 출력하라.
출력 예시:
삼성전자
LG전자
Naver
SK하이닉스
미래에셋대우
'''
print("\n".join(interest))


print("-------------------------------------069 문자열 split 메서드")
# 069 문자열 split 메서드
'''회사 이름이 슬래시 ('/')로 구분되어 하나의 문자열로 저장되어 있다.'''
string = "삼성전자/LG전자/Naver"
'''이를 interest 이름의 리스트로 분리 저장하라.'''
'''
실행 예시
print(interest)
['삼성전자', 'LG전자', 'Naver']
'''
interest = string.split("/")
print(interest)


print("-------------------------------------070 리스트 정렬")
# 070 리스트 정렬
'''리스트에 있는 값을 오름차순으로 정렬하세요.'''
data = [2, 4, 3, 1, 5, 10, 9]
data.sort()
print(data)
###
data2 = sorted(data)
print(data2)


print("-------------------------------------071")
# 071
'''my_variable 이름의 비어있는 튜플을 만들라.'''
my_variable = ()
print(type(my_variable))


print("-------------------------------------072")
# 072
'''2016년 11월 영화 예매 순위 기준 top3는 다음과 같다.
   영화 제목을 movie_rank 이름의 튜플에 저장하라. (순위 정보는 저장하지 않는다.)'''
'''
순위	영화
1	닥터 스트레인지
2	스플릿
3	럭키
'''
movie_rank = ('닥터 스트레인지','스플릿', '럭키')
print(movie_rank)


print("-------------------------------------073")
# 073
'''숫자 1 이 저장된 튜플을 생성하라.'''
t1 = (1, )
print(type(t1), t1)


print("-------------------------------------074")
# 074
'''다음 코드를 실행해보고 오류가 발생하는 원인을 설명하라.'''
'''
t = (1, 2, 3)
t[0] = 'a'

튜플은 수정할 수 없다. -> 내 답
tuple은 원소(element)의 값을 변경할 수 없습니다. -> 정답
'''


print("-------------------------------------075")
# 075
'''아래와 같이 t에는 1, 2, 3, 4 데이터가 바인딩되어 있다.
   t가 바인딩하는 데이터 타입은 무엇인가? 튜플입니다.
   
   원칙적으로 튜플은 괄호와 함께 데이터를 정의해야 하지만,
   사용자 편의를 위해 괄호 없이도 동작합니다.'''
t = 1, 2, 3, 4
print(type(t), t)


print("-------------------------------------076")
# 076
'''변수 t에는 아래와 같은 값이 저장되어 있다.
   변수 t가 ('A', 'b', 'c') 튜플을 가리키도록 수정 하라.'''
# t = ('a', 'b', 'c')
# print(list(t))
# t = ['A', 'b', 'c']
# print(tuple(t)) # 내 답

# 정답
t = ('a', 'b', 'c')
t = ('A', 'b', 'c')
print(t)
'''새로운 튜플을 만들고 t 라는 변수를 업데이트 해야 합니다. 
   기존의 튜플 ('a', 'b', 'c')은 자동으로 삭제됩니다.'''


print("-------------------------------------077")
# 077
'''다음 튜플을 리스트로 변환하라.'''
interest = ('삼성전자', 'LG전자', 'SK Hynix')
# print(list(interest)) # 내답
# 정답
data = list(interest)
print(data)


print("-------------------------------------078")
# 078
'''다음 리스트를 튜플로 변경하라.'''
interest = ['삼성전자', 'LG전자', 'SK Hynix']
data1 = tuple(interest)
print(data1) # 변환만 하라고 하면 print()안씀


print("-------------------------------------079 튜플 언팩킹")
# 079 튜플 언팩킹
'''다음 코드의 실행 결과를 예상하라.'''
# temp = ('apple', 'banana', 'cake')
# a, b, c = temp
# print(a, b, c)
# apple banana cake 딩동댕


print("-------------------------------------080 range 함수 (┬┬﹏┬┬)")
# 080 range 함수 (┬┬﹏┬┬)
'''1 부터 99까지의 정수 중 짝수만 저장된 튜플을 생성하라.'''
data = tuple(range(2,100,2))
print(data)

print("-------------------------------------081 별 표현식")
# 081 별 표현식 까먹었다,,
'''기본적으로 데이터 언패킹은 좌변의 변수와 우변 데이터 개수가 같아야 합니다. 
   하지만 star expression을 사용하면 변수의 개수가 달라도 데이터 언패킹을 할 수 있습니다. 
   튜플에 저장된 데이터 중에서 앞에 있는 두 개의 데이터만 필요할 경우
   나머지 데이터의 언패킹 코드를 작성할 필요가 없습니다.'''

'''다음과 같이 10개의 값이 저장된 scores 리스트가 있을 때,
   start expression을 사용하여 좌측 8개의 값을 valid_score 변수에 바인딩하여라.'''
scores = [8.8, 8.9, 8.7, 9.2, 9.3, 9.7, 9.9, 9.5, 7.8, 9.4]
*valid_score, a, b = scores
print(valid_score)


print("-------------------------------------082")
# 082
'''다음과 같이 10개의 값이 저장된 scores 리스트가 있을 때,
   start expression을 사용하여 우측 8개의 값을 valid_score 변수에 바인딩하여라.'''

scores = [8.8, 8.9, 8.7, 9.2, 9.3, 9.7, 9.9, 9.5, 7.8, 9.4]
a, b, *valid_score = scores
print(valid_score)


print("-------------------------------------083")
# 083
'''다음과 같이 10개의 값이 저장된 scores 리스트가 있을 때,
   start expression을 사용하여 가운데 있는 8개의 값을 valid_score 변수에 바인딩하여라.'''
scores = [8.8, 8.9, 8.7, 9.2, 9.3, 9.7, 9.9, 9.5, 7.8, 9.4]
a, *valid_score, b = scores
print(valid_score)


print("-------------------------------------084 비어있는 딕셔너리")
# 084 비어있는 딕셔너리
'''temp 이름의 비어있는 딕셔너리를 만들라.'''
temp = { }
print(type(temp), temp)


print("-------------------------------------085")
# 085
'''다음 아이스크림 이름과 희망 가격을 딕셔너리로 구성하라.
이름	희망 가격
메로나	1000
폴라포	1200
빵빠레	1800
'''
icecream = {'메로나': 1000, '폴라포': 1200, '빵빠레' : 1800}
print(icecream)


print("-------------------------------------086")
# 086 기억안났다
'''085 번의 딕셔너리에 아래 아이스크림 가격정보를 추가하라.
이름	희망 가격
죠스바	1200
월드콘	1500
'''
a = {'죠스바':1200, '월드콘':1500}
icecream['죠스바'] = 1200
icecream['월드콘'] = 1500
print(icecream)


print("-------------------------------------087")
# 087
'''다음 딕셔너리를 사용하여 메로나 가격을 출력하라.'''
ice = {'메로나': 1000,
       '폴로포': 1200,
       '빵빠레': 1800,
       '죠스바': 1200,
       '월드콘': 1500}

print("메로나 가격: ", ice['메로나'])


print("-------------------------------------088")
# 088
'''다음 딕셔너리에서 메로나의 가격을 1300으로 수정하라.'''
ice = {'메로나': 1000,
       '폴로포': 1200,
       '빵빠레': 1800,
       '죠스바': 1200,
       '월드콘': 1500}

ice['메로나'] = 1300
print(ice)


print("-------------------------------------089")
# 089
'''다음 딕셔너리에서 메로나를 삭제하라.'''
ice = {'메로나': 1000,
       '폴로포': 1200,
       '빵빠레': 1800,
       '죠스바': 1200,
       '월드콘': 1500}

del ice['메로나']
print(ice)


print("-------------------------------------090")
# 090
'''다음 코드에서 에러가 발생한 원인을 설명하라.
icecream = {'폴라포': 1200, '빵빠레': 1800, '월드콘': 1500, '메로나': 1000}
icecream['누가바']
'''
# 딕셔너리 icecream 안에 '누가바' 라는 key와 key값의 value가 없기 때문이다.